-- Code generated by Netspective IGS. DO NOT EDIT.

CREATE TABLE IF NOT EXISTS record_status (
    id INTEGER PRIMARY KEY NOT NULL,
    code VARCHAR(255) NOT NULL,
    value VARCHAR(255) NOT NULL
);

CREATE TABLE IF NOT EXISTS party_type (
    id INTEGER PRIMARY KEY NOT NULL,
    code VARCHAR(255) NOT NULL,
    value VARCHAR(255) NOT NULL
);

CREATE TABLE IF NOT EXISTS party (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4 (),
    party_name VARCHAR(255) NOT NULL,
    party_type_id INTEGER NOT NULL,
    party_uuid UUID NOT NULL DEFAULT uuid_generate_v4 (),
    created_at TIMESTAMPTZ NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updated_on TIMESTAMPTZ,
    record_status_id INTEGER NOT NULL DEFAULT 1,
    FOREIGN KEY (party_type_id) REFERENCES party_type(id),
    FOREIGN KEY (record_status_id) REFERENCES record_status(id)
);

CREATE TABLE IF NOT EXISTS party_identifier_source (
    id INTEGER PRIMARY KEY NOT NULL,
    code VARCHAR(255) NOT NULL,
    value VARCHAR(255) NOT NULL
);

CREATE TABLE IF NOT EXISTS party_identifier (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4 (),
    party_id UUID NOT NULL,
    identifier_name VARCHAR(255) NOT NULL,
    identifier_value VARCHAR(255) NOT NULL,
    party_identifier_source_id INTEGER NOT NULL,
    created_at TIMESTAMPTZ NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updated_on TIMESTAMPTZ,
    record_status_id INTEGER NOT NULL DEFAULT 1,
    FOREIGN KEY (party_id) REFERENCES party(id),
    FOREIGN KEY (party_identifier_source_id) REFERENCES party_identifier_source(id),
    FOREIGN KEY (record_status_id) REFERENCES record_status(id)
);

CREATE TABLE IF NOT EXISTS party_relation_type (
    id INTEGER PRIMARY KEY NOT NULL,
    code VARCHAR(255) NOT NULL,
    value VARCHAR(255) NOT NULL
);

CREATE TABLE IF NOT EXISTS party_relation (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4 (),
    origin_party_id UUID NOT NULL,
    related_party_id UUID NOT NULL,
    party_relation_type_id INTEGER NOT NULL,
    created_at TIMESTAMPTZ NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updated_on TIMESTAMPTZ,
    record_status_id INTEGER NOT NULL DEFAULT 1,
    FOREIGN KEY (origin_party_id) REFERENCES party(id),
    FOREIGN KEY (related_party_id) REFERENCES party(id),
    FOREIGN KEY (party_relation_type_id) REFERENCES party_relation_type(id),
    FOREIGN KEY (record_status_id) REFERENCES record_status(id)
);

CREATE TABLE IF NOT EXISTS organization_type (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4 (),
    party_id UUID NOT NULL DEFAULT '672124b6-9894-11e5-be38-001d42e813fe',
    code VARCHAR(255) NOT NULL,
    value VARCHAR(255) NOT NULL,
    created_at TIMESTAMPTZ NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updated_on TIMESTAMPTZ,
    record_status_id INTEGER NOT NULL DEFAULT 1,
    FOREIGN KEY (party_id) REFERENCES party(id),
    FOREIGN KEY (record_status_id) REFERENCES record_status(id)
);

CREATE TABLE IF NOT EXISTS organization (
    id UUID PRIMARY KEY NOT NULL,
    organization_type_id UUID NOT NULL,
    parent_org_id UUID,
    org_name VARCHAR(255) NOT NULL,
    created_at TIMESTAMPTZ NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updated_on TIMESTAMPTZ,
    record_status_id INTEGER NOT NULL DEFAULT 1,
    FOREIGN KEY (organization_type_id) REFERENCES organization_type(id),
    FOREIGN KEY (record_status_id) REFERENCES record_status(id)
);

CREATE TABLE IF NOT EXISTS spoken_language (
    id INTEGER PRIMARY KEY NOT NULL,
    code VARCHAR(255) NOT NULL,
    value VARCHAR(255) NOT NULL
);

CREATE TABLE IF NOT EXISTS person_education_level (
    id INTEGER PRIMARY KEY NOT NULL,
    code VARCHAR(255) NOT NULL,
    value VARCHAR(255) NOT NULL
);

CREATE TABLE IF NOT EXISTS person_type (
    id INTEGER PRIMARY KEY NOT NULL,
    code VARCHAR(255) NOT NULL,
    value VARCHAR(255) NOT NULL
);

CREATE TABLE IF NOT EXISTS person_gender (
    id INTEGER PRIMARY KEY NOT NULL,
    code VARCHAR(255) NOT NULL,
    value VARCHAR(255) NOT NULL
);

CREATE TABLE IF NOT EXISTS person (
    id UUID PRIMARY KEY NOT NULL,
    person_type_id INTEGER NOT NULL,
    person_fname VARCHAR(255) NOT NULL,
    person_mname VARCHAR(255) NOT NULL,
    person_lname VARCHAR(255) NOT NULL,
    person_gender_id INTEGER NOT NULL,
    dob TIMESTAMPTZ NOT NULL,
    created_at TIMESTAMPTZ NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updated_on TIMESTAMPTZ,
    record_status_id INTEGER NOT NULL DEFAULT 1,
    FOREIGN KEY (person_type_id) REFERENCES person_type(id),
    FOREIGN KEY (person_gender_id) REFERENCES person_gender(id),
    FOREIGN KEY (record_status_id) REFERENCES record_status(id)
);

CREATE TABLE IF NOT EXISTS contact_type (
    id INTEGER PRIMARY KEY NOT NULL,
    code VARCHAR(255) NOT NULL,
    value VARCHAR(255) NOT NULL
);

CREATE TABLE IF NOT EXISTS contact_electronic (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4 (),
    electronic_details VARCHAR(255) NOT NULL,
    contact_type_id INTEGER NOT NULL,
    party_id UUID NOT NULL,
    created_at TIMESTAMPTZ NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updated_on TIMESTAMPTZ,
    record_status_id INTEGER NOT NULL DEFAULT 1,
    FOREIGN KEY (contact_type_id) REFERENCES contact_type(id),
    FOREIGN KEY (party_id) REFERENCES party(id),
    FOREIGN KEY (record_status_id) REFERENCES record_status(id)
);

CREATE TABLE IF NOT EXISTS contact_land (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4 (),
    address_line1 VARCHAR(255) NOT NULL,
    address_line2 VARCHAR(255) NOT NULL,
    address_zip VARCHAR(255) NOT NULL,
    address_city VARCHAR(255) NOT NULL,
    address_state VARCHAR(255) NOT NULL,
    address_country VARCHAR(255) NOT NULL,
    contact_type_id INTEGER NOT NULL,
    party_id UUID NOT NULL,
    created_at TIMESTAMPTZ NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updated_on TIMESTAMPTZ,
    record_status_id INTEGER NOT NULL DEFAULT 1,
    FOREIGN KEY (contact_type_id) REFERENCES contact_type(id),
    FOREIGN KEY (party_id) REFERENCES party(id),
    FOREIGN KEY (record_status_id) REFERENCES record_status(id)
);

CREATE TABLE IF NOT EXISTS contact_tele (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4 (),
    number VARCHAR(255) NOT NULL,
    contact_type_id INTEGER NOT NULL,
    party_id UUID NOT NULL,
    created_at TIMESTAMPTZ NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updated_on TIMESTAMPTZ,
    record_status_id INTEGER NOT NULL DEFAULT 1,
    FOREIGN KEY (contact_type_id) REFERENCES contact_type(id),
    FOREIGN KEY (party_id) REFERENCES party(id),
    FOREIGN KEY (record_status_id) REFERENCES record_status(id)
);

CREATE TABLE IF NOT EXISTS account_type (
    id INTEGER PRIMARY KEY NOT NULL,
    code VARCHAR(255) NOT NULL,
    value VARCHAR(255) NOT NULL
);

CREATE TABLE IF NOT EXISTS account_auth_type (
    id INTEGER PRIMARY KEY NOT NULL,
    code VARCHAR(255) NOT NULL,
    value VARCHAR(255) NOT NULL
);

CREATE TABLE IF NOT EXISTS account (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4 (),
    account_type_id INTEGER NOT NULL,
    account_name VARCHAR(255) NOT NULL,
    created_at TIMESTAMPTZ NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updated_on TIMESTAMPTZ,
    record_status_id INTEGER NOT NULL DEFAULT 1,
    FOREIGN KEY (account_type_id) REFERENCES account_type(id),
    FOREIGN KEY (record_status_id) REFERENCES record_status(id)
);

CREATE TABLE IF NOT EXISTS account_identifier (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4 (),
    account_id UUID NOT NULL,
    identifier_name VARCHAR(255) NOT NULL,
    identifier_value VARCHAR(255) NOT NULL,
    identifier_value_encrypted VARCHAR(255) NOT NULL,
    account_auth_type_id INTEGER NOT NULL,
    created_at TIMESTAMPTZ NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updated_on TIMESTAMPTZ,
    record_status_id INTEGER NOT NULL DEFAULT 1,
    FOREIGN KEY (account_id) REFERENCES account(id),
    FOREIGN KEY (account_auth_type_id) REFERENCES account_auth_type(id),
    FOREIGN KEY (record_status_id) REFERENCES record_status(id)
);

CREATE TABLE IF NOT EXISTS configuration_scope (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4 (),
    code VARCHAR(255) NOT NULL,
    value VARCHAR(255) NOT NULL,
    description VARCHAR(255) NOT NULL,
    hierarchy_level INTEGER NOT NULL,
    created_at TIMESTAMPTZ NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updated_on TIMESTAMPTZ,
    record_status_id INTEGER NOT NULL DEFAULT 1,
    FOREIGN KEY (record_status_id) REFERENCES record_status(id)
);

CREATE TABLE IF NOT EXISTS master_configuration (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4 (),
    configuration_scope_id UUID NOT NULL,
    name VARCHAR(255) NOT NULL,
    description VARCHAR(255) NOT NULL,
    default_value VARCHAR(255) NOT NULL,
    short_key VARCHAR(255) NOT NULL,
    config_type VARCHAR(255) NOT NULL,
    created_at TIMESTAMPTZ NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updated_on TIMESTAMPTZ,
    record_status_id INTEGER NOT NULL DEFAULT 1,
    FOREIGN KEY (configuration_scope_id) REFERENCES configuration_scope(id),
    FOREIGN KEY (record_status_id) REFERENCES record_status(id)
);

CREATE TABLE IF NOT EXISTS configuration_value (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4 (),
    party_id UUID NOT NULL,
    master_configuration_id UUID NOT NULL,
    value JSON NOT NULL,
    is_multivalue BOOLEAN NOT NULL DEFAULT FALSE,
    nameas VARCHAR(255) NOT NULL,
    description VARCHAR(255) NOT NULL,
    created_at TIMESTAMPTZ NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updated_on TIMESTAMPTZ,
    record_status_id INTEGER NOT NULL DEFAULT 1,
    FOREIGN KEY (party_id) REFERENCES party(id),
    FOREIGN KEY (master_configuration_id) REFERENCES master_configuration(id),
    FOREIGN KEY (record_status_id) REFERENCES record_status(id)
);

CREATE TABLE IF NOT EXISTS configuration_master_options (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4 (),
    name VARCHAR(255) NOT NULL,
    description VARCHAR(255) NOT NULL,
    type VARCHAR(255) NOT NULL,
    created_at TIMESTAMPTZ NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updated_on TIMESTAMPTZ,
    record_status_id INTEGER NOT NULL DEFAULT 1,
    FOREIGN KEY (record_status_id) REFERENCES record_status(id)
);

CREATE TABLE IF NOT EXISTS configuration_feature_flag (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4 (),
    party_id UUID NOT NULL,
    configuration_master_options_id UUID NOT NULL,
    master_configuration_id UUID NOT NULL,
    created_at TIMESTAMPTZ NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updated_on TIMESTAMPTZ,
    record_status_id INTEGER NOT NULL DEFAULT 1,
    FOREIGN KEY (party_id) REFERENCES party(id),
    FOREIGN KEY (configuration_master_options_id) REFERENCES configuration_master_options(id),
    FOREIGN KEY (master_configuration_id) REFERENCES master_configuration(id),
    FOREIGN KEY (record_status_id) REFERENCES record_status(id)
);

CREATE TABLE IF NOT EXISTS plpgsql_check_result (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4 (),
    function_id VARCHAR(255),
    line_no INTEGER,
    statement VARCHAR(3000),
    sql_state VARCHAR(255),
    message VARCHAR(3000),
    detail VARCHAR(3000),
    hint VARCHAR(255),
    level VARCHAR(255),
    position VARCHAR(255),
    query VARCHAR(3000),
    context VARCHAR(255),
    created_at TIMESTAMPTZ NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updated_on TIMESTAMPTZ,
    record_status_id INTEGER NOT NULL DEFAULT 1,
    FOREIGN KEY (record_status_id) REFERENCES record_status(id)
);

DROP TYPE IF EXISTS person_demographics_record;
CREATE TYPE person_demographics_record AS (person_fname TEXT, person_mname TEXT, person_lname TEXT, electronic_details TEXT, dob TIMESTAMPTZ, gender INTEGER, person_type INTEGER, number TEXT, address_line1 TEXT, address_line2 TEXT, address_city TEXT, address_state TEXT, address_country TEXT, address_zip TEXT);
