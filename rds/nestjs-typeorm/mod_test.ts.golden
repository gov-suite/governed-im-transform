// Code generated by Netspective IGS. DO NOT EDIT.

import { Injectable } from '@nestjs/common';
import { TypeOrmCrudService } from '@nestjsx/crud-typeorm';
import { InjectRepository } from '@nestjs/typeorm';
import { Repository } from 'typeorm';
import { Module } from '@nestjs/common';
import { TypeOrmModule } from '@nestjs/typeorm';
import { Controller } from '@nestjs/common';
import { Crud, CrudController } from '@nestjsx/crud';
import { Entity, Column, PrimaryGeneratedColumn, PrimaryColumn, OneToOne, OneToMany, ManyToOne, JoinColumn } from 'typeorm';
import { ApiProperty } from '@nestjs/swagger';

export const allModules = [];

@Entity({name: 'record_status'})
export class RecordStatus {

  @ApiProperty({ required: true })
  @PrimaryColumn({name: 'record_status_id'})
  id: number;

  @ApiProperty({ required: true })
  @Column({name: 'code'})
  code: string;

  @ApiProperty({ required: true })
  @Column({name: 'value'})
  value: string;
}

@Injectable()
export class RecordStatusService extends TypeOrmCrudService<RecordStatus> {
    constructor(@InjectRepository(RecordStatus) repo: Repository<RecordStatus>) {
        super(repo);
    }
}

@Crud({ model: { type: RecordStatus }})
@Controller('record-status')
export class RecordStatusController implements CrudController<RecordStatus> {
    constructor(public service: RecordStatusService) { }
}

@Module({
  controllers: [RecordStatusController],
  providers: [RecordStatusService],
  imports: [
    TypeOrmModule.forFeature([RecordStatus]),
  ],
  exports: [RecordStatusService],
})
export class RecordStatusModule {}
allModules.push(RecordStatusModule)

@Entity({name: 'party_type'})
export class PartyType {

  @ApiProperty({ required: true })
  @PrimaryColumn({name: 'party_type_id'})
  id: number;

  @ApiProperty({ required: true })
  @Column({name: 'code'})
  code: string;

  @ApiProperty({ required: true })
  @Column({name: 'value'})
  value: string;
}

@Injectable()
export class PartyTypeService extends TypeOrmCrudService<PartyType> {
    constructor(@InjectRepository(PartyType) repo: Repository<PartyType>) {
        super(repo);
    }
}

@Crud({ model: { type: PartyType }})
@Controller('party-type')
export class PartyTypeController implements CrudController<PartyType> {
    constructor(public service: PartyTypeService) { }
}

@Module({
  controllers: [PartyTypeController],
  providers: [PartyTypeService],
  imports: [
    TypeOrmModule.forFeature([PartyType]),
  ],
  exports: [PartyTypeService],
})
export class PartyTypeModule {}
allModules.push(PartyTypeModule)

@Entity({name: 'party'})
export class Party {

  @ApiProperty({ required: true })
  @PrimaryGeneratedColumn({name: 'party_id'})
  id: number;

  @ApiProperty({ required: true })
  @Column({name: 'party_name'})
  partyName: string;

  @ApiProperty({ required: true })
  @OneToOne(type => PartyType)
  @JoinColumn({name: 'party_type_id'})
  partyType: PartyType;

  @ApiProperty({ required: true })
  @Column({name: 'created_at'})
  createdAt: Date;

  @ApiProperty({ required: false })
  @Column({name: 'updated_on'})
  updatedOn?: Date;

  @ApiProperty({ required: true })
  @OneToOne(type => RecordStatus)
  @JoinColumn({name: 'record_status_id'})
  recordStatus: RecordStatus;
  @OneToMany(type => PartyIdentifier, partyIdentifier => partyIdentifier.party)
  identifiers : PartyIdentifier[]
  @OneToMany(type => PartyRelation, partyRelation => partyRelation.originParty)
  relatedParties : PartyRelation[]
}

@Injectable()
export class PartyService extends TypeOrmCrudService<Party> {
    constructor(@InjectRepository(Party) repo: Repository<Party>) {
        super(repo);
    }
}

@Crud({ model: { type: Party }})
@Controller('party')
export class PartyController implements CrudController<Party> {
    constructor(public service: PartyService) { }
}

@Module({
  controllers: [PartyController],
  providers: [PartyService],
  imports: [
    TypeOrmModule.forFeature([Party]),
  ],
  exports: [PartyService],
})
export class PartyModule {}
allModules.push(PartyModule)

@Entity({name: 'party_identifier_source'})
export class PartyIdentifierSource {

  @ApiProperty({ required: true })
  @PrimaryColumn({name: 'party_identifier_source_id'})
  id: number;

  @ApiProperty({ required: true })
  @Column({name: 'code'})
  code: string;

  @ApiProperty({ required: true })
  @Column({name: 'value'})
  value: string;
}

@Injectable()
export class PartyIdentifierSourceService extends TypeOrmCrudService<PartyIdentifierSource> {
    constructor(@InjectRepository(PartyIdentifierSource) repo: Repository<PartyIdentifierSource>) {
        super(repo);
    }
}

@Crud({ model: { type: PartyIdentifierSource }})
@Controller('party-identifier-source')
export class PartyIdentifierSourceController implements CrudController<PartyIdentifierSource> {
    constructor(public service: PartyIdentifierSourceService) { }
}

@Module({
  controllers: [PartyIdentifierSourceController],
  providers: [PartyIdentifierSourceService],
  imports: [
    TypeOrmModule.forFeature([PartyIdentifierSource]),
  ],
  exports: [PartyIdentifierSourceService],
})
export class PartyIdentifierSourceModule {}
allModules.push(PartyIdentifierSourceModule)

@Entity({name: 'party_identifier'})
export class PartyIdentifier {

  @ApiProperty({ required: true })
  @PrimaryGeneratedColumn({name: 'party_identifier_id'})
  id: number;

  @ApiProperty({ required: true })
  @ManyToOne(type => Party, party => party.identifiers)
  @JoinColumn()
  party: Party;

  @ApiProperty({ required: true })
  @Column({name: 'identifier_name'})
  identifierName: string;

  @ApiProperty({ required: true })
  @Column({name: 'identifier_value'})
  identifierValue: string;

  @ApiProperty({ required: true })
  @OneToOne(type => PartyIdentifierSource)
  @JoinColumn({name: 'party_identifier_source_id'})
  partyIdentifierSource: PartyIdentifierSource;

  @ApiProperty({ required: true })
  @Column({name: 'created_at'})
  createdAt: Date;

  @ApiProperty({ required: false })
  @Column({name: 'updated_on'})
  updatedOn?: Date;

  @ApiProperty({ required: true })
  @OneToOne(type => RecordStatus)
  @JoinColumn({name: 'record_status_id'})
  recordStatus: RecordStatus;
}

@Injectable()
export class PartyIdentifierService extends TypeOrmCrudService<PartyIdentifier> {
    constructor(@InjectRepository(PartyIdentifier) repo: Repository<PartyIdentifier>) {
        super(repo);
    }
}

@Crud({ model: { type: PartyIdentifier }})
@Controller('party-identifier')
export class PartyIdentifierController implements CrudController<PartyIdentifier> {
    constructor(public service: PartyIdentifierService) { }
}

@Module({
  controllers: [PartyIdentifierController],
  providers: [PartyIdentifierService],
  imports: [
    TypeOrmModule.forFeature([PartyIdentifier]),
  ],
  exports: [PartyIdentifierService],
})
export class PartyIdentifierModule {}
allModules.push(PartyIdentifierModule)

@Entity({name: 'party_relation_type'})
export class PartyRelationType {

  @ApiProperty({ required: true })
  @PrimaryColumn({name: 'party_relation_type_id'})
  id: number;

  @ApiProperty({ required: true })
  @Column({name: 'code'})
  code: string;

  @ApiProperty({ required: true })
  @Column({name: 'value'})
  value: string;
}

@Injectable()
export class PartyRelationTypeService extends TypeOrmCrudService<PartyRelationType> {
    constructor(@InjectRepository(PartyRelationType) repo: Repository<PartyRelationType>) {
        super(repo);
    }
}

@Crud({ model: { type: PartyRelationType }})
@Controller('party-relation-type')
export class PartyRelationTypeController implements CrudController<PartyRelationType> {
    constructor(public service: PartyRelationTypeService) { }
}

@Module({
  controllers: [PartyRelationTypeController],
  providers: [PartyRelationTypeService],
  imports: [
    TypeOrmModule.forFeature([PartyRelationType]),
  ],
  exports: [PartyRelationTypeService],
})
export class PartyRelationTypeModule {}
allModules.push(PartyRelationTypeModule)

@Entity({name: 'party_relation'})
export class PartyRelation {

  @ApiProperty({ required: true })
  @PrimaryGeneratedColumn({name: 'party_relation_id'})
  id: number;

  @ApiProperty({ required: true })
  @ManyToOne(type => Party, party => party.relatedParties)
  @JoinColumn()
  originParty: Party;

  @OneToOne(type => Party)
  @JoinColumn({name: 'related_party_id'})
  relatedParty: Party;

  @ApiProperty({ required: true })
  @OneToOne(type => PartyRelationType)
  @JoinColumn({name: 'party_relation_type_id'})
  partyRelationType: PartyRelationType;

  @ApiProperty({ required: true })
  @Column({name: 'created_at'})
  createdAt: Date;

  @ApiProperty({ required: false })
  @Column({name: 'updated_on'})
  updatedOn?: Date;

  @ApiProperty({ required: true })
  @OneToOne(type => RecordStatus)
  @JoinColumn({name: 'record_status_id'})
  recordStatus: RecordStatus;
}

@Injectable()
export class PartyRelationService extends TypeOrmCrudService<PartyRelation> {
    constructor(@InjectRepository(PartyRelation) repo: Repository<PartyRelation>) {
        super(repo);
    }
}

@Crud({ model: { type: PartyRelation }})
@Controller('party-relation')
export class PartyRelationController implements CrudController<PartyRelation> {
    constructor(public service: PartyRelationService) { }
}

@Module({
  controllers: [PartyRelationController],
  providers: [PartyRelationService],
  imports: [
    TypeOrmModule.forFeature([PartyRelation]),
  ],
  exports: [PartyRelationService],
})
export class PartyRelationModule {}
allModules.push(PartyRelationModule)

@Entity({name: 'organization_type'})
export class OrganizationType {

  @ApiProperty({ required: true })
  @PrimaryGeneratedColumn({name: 'organization_type_id'})
  id: number;

  @OneToOne(type => Party)
  @JoinColumn({name: 'party_id'})
  party: Party;

  @ApiProperty({ required: true })
  @Column({name: 'code'})
  code: string;

  @ApiProperty({ required: true })
  @Column({name: 'value'})
  value: string;

  @ApiProperty({ required: true })
  @Column({name: 'created_at'})
  createdAt: Date;

  @ApiProperty({ required: false })
  @Column({name: 'updated_on'})
  updatedOn?: Date;

  @ApiProperty({ required: true })
  @OneToOne(type => RecordStatus)
  @JoinColumn({name: 'record_status_id'})
  recordStatus: RecordStatus;
}

@Injectable()
export class OrganizationTypeService extends TypeOrmCrudService<OrganizationType> {
    constructor(@InjectRepository(OrganizationType) repo: Repository<OrganizationType>) {
        super(repo);
    }
}

@Crud({ model: { type: OrganizationType }})
@Controller('organization-type')
export class OrganizationTypeController implements CrudController<OrganizationType> {
    constructor(public service: OrganizationTypeService) { }
}

@Module({
  controllers: [OrganizationTypeController],
  providers: [OrganizationTypeService],
  imports: [
    TypeOrmModule.forFeature([OrganizationType]),
  ],
  exports: [OrganizationTypeService],
})
export class OrganizationTypeModule {}
allModules.push(OrganizationTypeModule)

@Entity({name: 'organization'})
export class Organization {

  @PrimaryColumn({name: 'party_id'})
  @ApiProperty({ required: true })
  id: number;

  @OneToOne(type => Party)
  @JoinColumn({name: 'party_id'})
  party: Party;

  @ApiProperty({ required: true })
  @OneToOne(type => OrganizationType)
  @JoinColumn({name: 'organization_type_id'})
  organizationType: OrganizationType;

  @ApiProperty({ required: true })
  @Column({name: 'org_name'})
  orgName: string;

  @ApiProperty({ required: true })
  @Column({name: 'created_at'})
  createdAt: Date;

  @ApiProperty({ required: false })
  @Column({name: 'updated_on'})
  updatedOn?: Date;

  @ApiProperty({ required: true })
  @OneToOne(type => RecordStatus)
  @JoinColumn({name: 'record_status_id'})
  recordStatus: RecordStatus;
}

@Injectable()
export class OrganizationService extends TypeOrmCrudService<Organization> {
    constructor(@InjectRepository(Organization) repo: Repository<Organization>) {
        super(repo);
    }
}

@Crud({ model: { type: Organization }})
@Controller('organization')
export class OrganizationController implements CrudController<Organization> {
    constructor(public service: OrganizationService) { }
}

@Module({
  controllers: [OrganizationController],
  providers: [OrganizationService],
  imports: [
    TypeOrmModule.forFeature([Organization]),
  ],
  exports: [OrganizationService],
})
export class OrganizationModule {}
allModules.push(OrganizationModule)

@Entity({name: 'spoken_language'})
export class SpokenLanguage {

  @ApiProperty({ required: true })
  @PrimaryColumn({name: 'spoken_language_id'})
  id: number;

  @ApiProperty({ required: true })
  @Column({name: 'code'})
  code: string;

  @ApiProperty({ required: true })
  @Column({name: 'value'})
  value: string;
}

@Injectable()
export class SpokenLanguageService extends TypeOrmCrudService<SpokenLanguage> {
    constructor(@InjectRepository(SpokenLanguage) repo: Repository<SpokenLanguage>) {
        super(repo);
    }
}

@Crud({ model: { type: SpokenLanguage }})
@Controller('spoken-language')
export class SpokenLanguageController implements CrudController<SpokenLanguage> {
    constructor(public service: SpokenLanguageService) { }
}

@Module({
  controllers: [SpokenLanguageController],
  providers: [SpokenLanguageService],
  imports: [
    TypeOrmModule.forFeature([SpokenLanguage]),
  ],
  exports: [SpokenLanguageService],
})
export class SpokenLanguageModule {}
allModules.push(SpokenLanguageModule)

@Entity({name: 'person_education_level'})
export class PersonEducationLevel {

  @ApiProperty({ required: true })
  @PrimaryColumn({name: 'person_education_level_id'})
  id: number;

  @ApiProperty({ required: true })
  @Column({name: 'code'})
  code: string;

  @ApiProperty({ required: true })
  @Column({name: 'value'})
  value: string;
}

@Injectable()
export class PersonEducationLevelService extends TypeOrmCrudService<PersonEducationLevel> {
    constructor(@InjectRepository(PersonEducationLevel) repo: Repository<PersonEducationLevel>) {
        super(repo);
    }
}

@Crud({ model: { type: PersonEducationLevel }})
@Controller('person-education-level')
export class PersonEducationLevelController implements CrudController<PersonEducationLevel> {
    constructor(public service: PersonEducationLevelService) { }
}

@Module({
  controllers: [PersonEducationLevelController],
  providers: [PersonEducationLevelService],
  imports: [
    TypeOrmModule.forFeature([PersonEducationLevel]),
  ],
  exports: [PersonEducationLevelService],
})
export class PersonEducationLevelModule {}
allModules.push(PersonEducationLevelModule)

@Entity({name: 'person_type'})
export class PersonType {

  @ApiProperty({ required: true })
  @PrimaryColumn({name: 'person_type_id'})
  id: number;

  @ApiProperty({ required: true })
  @Column({name: 'code'})
  code: string;

  @ApiProperty({ required: true })
  @Column({name: 'value'})
  value: string;
}

@Injectable()
export class PersonTypeService extends TypeOrmCrudService<PersonType> {
    constructor(@InjectRepository(PersonType) repo: Repository<PersonType>) {
        super(repo);
    }
}

@Crud({ model: { type: PersonType }})
@Controller('person-type')
export class PersonTypeController implements CrudController<PersonType> {
    constructor(public service: PersonTypeService) { }
}

@Module({
  controllers: [PersonTypeController],
  providers: [PersonTypeService],
  imports: [
    TypeOrmModule.forFeature([PersonType]),
  ],
  exports: [PersonTypeService],
})
export class PersonTypeModule {}
allModules.push(PersonTypeModule)

@Entity({name: 'person_gender'})
export class PersonGender {

  @ApiProperty({ required: true })
  @PrimaryColumn({name: 'person_gender_id'})
  id: number;

  @ApiProperty({ required: true })
  @Column({name: 'code'})
  code: string;

  @ApiProperty({ required: true })
  @Column({name: 'value'})
  value: string;
}

@Injectable()
export class PersonGenderService extends TypeOrmCrudService<PersonGender> {
    constructor(@InjectRepository(PersonGender) repo: Repository<PersonGender>) {
        super(repo);
    }
}

@Crud({ model: { type: PersonGender }})
@Controller('person-gender')
export class PersonGenderController implements CrudController<PersonGender> {
    constructor(public service: PersonGenderService) { }
}

@Module({
  controllers: [PersonGenderController],
  providers: [PersonGenderService],
  imports: [
    TypeOrmModule.forFeature([PersonGender]),
  ],
  exports: [PersonGenderService],
})
export class PersonGenderModule {}
allModules.push(PersonGenderModule)

@Entity({name: 'person'})
export class Person {

  @PrimaryColumn({name: 'party_id'})
  @ApiProperty({ required: true })
  id: number;

  @OneToOne(type => Party)
  @JoinColumn({name: 'party_id'})
  party: Party;

  @ApiProperty({ required: true })
  @OneToOne(type => PersonType)
  @JoinColumn({name: 'person_type_id'})
  personType: PersonType;

  @ApiProperty({ required: true })
  @Column({name: 'person_fname'})
  personFname: string;

  @ApiProperty({ required: true })
  @Column({name: 'person_mname'})
  personMname: string;

  @ApiProperty({ required: true })
  @Column({name: 'person_lname'})
  personLname: string;

  @ApiProperty({ required: true })
  @OneToOne(type => PersonGender)
  @JoinColumn({name: 'person_gender_id'})
  personGender: PersonGender;

  @ApiProperty({ required: true })
  @Column({name: 'dob'})
  dob: Date;

  @ApiProperty({ required: true })
  @Column({name: 'created_at'})
  createdAt: Date;

  @ApiProperty({ required: false })
  @Column({name: 'updated_on'})
  updatedOn?: Date;

  @ApiProperty({ required: true })
  @OneToOne(type => RecordStatus)
  @JoinColumn({name: 'record_status_id'})
  recordStatus: RecordStatus;
}

@Injectable()
export class PersonService extends TypeOrmCrudService<Person> {
    constructor(@InjectRepository(Person) repo: Repository<Person>) {
        super(repo);
    }
}

@Crud({ model: { type: Person }})
@Controller('person')
export class PersonController implements CrudController<Person> {
    constructor(public service: PersonService) { }
}

@Module({
  controllers: [PersonController],
  providers: [PersonService],
  imports: [
    TypeOrmModule.forFeature([Person]),
  ],
  exports: [PersonService],
})
export class PersonModule {}
allModules.push(PersonModule)

@Entity({name: 'contact_type'})
export class ContactType {

  @ApiProperty({ required: true })
  @PrimaryColumn({name: 'contact_type_id'})
  id: number;

  @ApiProperty({ required: true })
  @Column({name: 'code'})
  code: string;

  @ApiProperty({ required: true })
  @Column({name: 'value'})
  value: string;
}

@Injectable()
export class ContactTypeService extends TypeOrmCrudService<ContactType> {
    constructor(@InjectRepository(ContactType) repo: Repository<ContactType>) {
        super(repo);
    }
}

@Crud({ model: { type: ContactType }})
@Controller('contact-type')
export class ContactTypeController implements CrudController<ContactType> {
    constructor(public service: ContactTypeService) { }
}

@Module({
  controllers: [ContactTypeController],
  providers: [ContactTypeService],
  imports: [
    TypeOrmModule.forFeature([ContactType]),
  ],
  exports: [ContactTypeService],
})
export class ContactTypeModule {}
allModules.push(ContactTypeModule)

@Entity({name: 'contact_electronic'})
export class ContactElectronic {

  @ApiProperty({ required: true })
  @PrimaryGeneratedColumn({name: 'contact_electronic_id'})
  id: number;

  @ApiProperty({ required: true })
  @Column({name: 'electronic_details'})
  electronicDetails: string;

  @ApiProperty({ required: true })
  @OneToOne(type => ContactType)
  @JoinColumn({name: 'contact_type_id'})
  contactType: ContactType;

  @OneToOne(type => Party)
  @JoinColumn({name: 'party_id'})
  party: Party;

  @ApiProperty({ required: true })
  @Column({name: 'created_at'})
  createdAt: Date;

  @ApiProperty({ required: false })
  @Column({name: 'updated_on'})
  updatedOn?: Date;

  @ApiProperty({ required: true })
  @OneToOne(type => RecordStatus)
  @JoinColumn({name: 'record_status_id'})
  recordStatus: RecordStatus;
}

@Injectable()
export class ContactElectronicService extends TypeOrmCrudService<ContactElectronic> {
    constructor(@InjectRepository(ContactElectronic) repo: Repository<ContactElectronic>) {
        super(repo);
    }
}

@Crud({ model: { type: ContactElectronic }})
@Controller('contact-electronic')
export class ContactElectronicController implements CrudController<ContactElectronic> {
    constructor(public service: ContactElectronicService) { }
}

@Module({
  controllers: [ContactElectronicController],
  providers: [ContactElectronicService],
  imports: [
    TypeOrmModule.forFeature([ContactElectronic]),
  ],
  exports: [ContactElectronicService],
})
export class ContactElectronicModule {}
allModules.push(ContactElectronicModule)

@Entity({name: 'contact_land'})
export class ContactLand {

  @ApiProperty({ required: true })
  @PrimaryGeneratedColumn({name: 'contact_land_id'})
  id: number;

  @ApiProperty({ required: true })
  @Column({name: 'address_line1'})
  addressLine1: string;

  @ApiProperty({ required: true })
  @Column({name: 'address_line2'})
  addressLine2: string;

  @ApiProperty({ required: true })
  @Column({name: 'address_zip'})
  addressZip: string;

  @ApiProperty({ required: true })
  @Column({name: 'address_city'})
  addressCity: string;

  @ApiProperty({ required: true })
  @Column({name: 'address_state'})
  addressState: string;

  @ApiProperty({ required: true })
  @Column({name: 'address_country'})
  addressCountry: string;

  @ApiProperty({ required: true })
  @OneToOne(type => ContactType)
  @JoinColumn({name: 'contact_type_id'})
  contactType: ContactType;

  @OneToOne(type => Party)
  @JoinColumn({name: 'party_id'})
  party: Party;

  @ApiProperty({ required: true })
  @Column({name: 'created_at'})
  createdAt: Date;

  @ApiProperty({ required: false })
  @Column({name: 'updated_on'})
  updatedOn?: Date;

  @ApiProperty({ required: true })
  @OneToOne(type => RecordStatus)
  @JoinColumn({name: 'record_status_id'})
  recordStatus: RecordStatus;
}

@Injectable()
export class ContactLandService extends TypeOrmCrudService<ContactLand> {
    constructor(@InjectRepository(ContactLand) repo: Repository<ContactLand>) {
        super(repo);
    }
}

@Crud({ model: { type: ContactLand }})
@Controller('contact-land')
export class ContactLandController implements CrudController<ContactLand> {
    constructor(public service: ContactLandService) { }
}

@Module({
  controllers: [ContactLandController],
  providers: [ContactLandService],
  imports: [
    TypeOrmModule.forFeature([ContactLand]),
  ],
  exports: [ContactLandService],
})
export class ContactLandModule {}
allModules.push(ContactLandModule)

@Entity({name: 'contact_tele'})
export class ContactTele {

  @ApiProperty({ required: true })
  @PrimaryGeneratedColumn({name: 'contact_tele_id'})
  id: number;

  @ApiProperty({ required: true })
  @Column({name: 'number'})
  number: string;

  @ApiProperty({ required: true })
  @OneToOne(type => ContactType)
  @JoinColumn({name: 'contact_type_id'})
  contactType: ContactType;

  @OneToOne(type => Party)
  @JoinColumn({name: 'party_id'})
  party: Party;

  @ApiProperty({ required: true })
  @Column({name: 'created_at'})
  createdAt: Date;

  @ApiProperty({ required: false })
  @Column({name: 'updated_on'})
  updatedOn?: Date;

  @ApiProperty({ required: true })
  @OneToOne(type => RecordStatus)
  @JoinColumn({name: 'record_status_id'})
  recordStatus: RecordStatus;
}

@Injectable()
export class ContactTeleService extends TypeOrmCrudService<ContactTele> {
    constructor(@InjectRepository(ContactTele) repo: Repository<ContactTele>) {
        super(repo);
    }
}

@Crud({ model: { type: ContactTele }})
@Controller('contact-tele')
export class ContactTeleController implements CrudController<ContactTele> {
    constructor(public service: ContactTeleService) { }
}

@Module({
  controllers: [ContactTeleController],
  providers: [ContactTeleService],
  imports: [
    TypeOrmModule.forFeature([ContactTele]),
  ],
  exports: [ContactTeleService],
})
export class ContactTeleModule {}
allModules.push(ContactTeleModule)

@Entity({name: 'account_type'})
export class AccountType {

  @ApiProperty({ required: true })
  @PrimaryColumn({name: 'account_type_id'})
  id: number;

  @ApiProperty({ required: true })
  @Column({name: 'code'})
  code: string;

  @ApiProperty({ required: true })
  @Column({name: 'value'})
  value: string;
}

@Injectable()
export class AccountTypeService extends TypeOrmCrudService<AccountType> {
    constructor(@InjectRepository(AccountType) repo: Repository<AccountType>) {
        super(repo);
    }
}

@Crud({ model: { type: AccountType }})
@Controller('account-type')
export class AccountTypeController implements CrudController<AccountType> {
    constructor(public service: AccountTypeService) { }
}

@Module({
  controllers: [AccountTypeController],
  providers: [AccountTypeService],
  imports: [
    TypeOrmModule.forFeature([AccountType]),
  ],
  exports: [AccountTypeService],
})
export class AccountTypeModule {}
allModules.push(AccountTypeModule)

@Entity({name: 'account_auth_type'})
export class AccountAuthType {

  @ApiProperty({ required: true })
  @PrimaryColumn({name: 'account_auth_type_id'})
  id: number;

  @ApiProperty({ required: true })
  @Column({name: 'code'})
  code: string;

  @ApiProperty({ required: true })
  @Column({name: 'value'})
  value: string;
}

@Injectable()
export class AccountAuthTypeService extends TypeOrmCrudService<AccountAuthType> {
    constructor(@InjectRepository(AccountAuthType) repo: Repository<AccountAuthType>) {
        super(repo);
    }
}

@Crud({ model: { type: AccountAuthType }})
@Controller('account-auth-type')
export class AccountAuthTypeController implements CrudController<AccountAuthType> {
    constructor(public service: AccountAuthTypeService) { }
}

@Module({
  controllers: [AccountAuthTypeController],
  providers: [AccountAuthTypeService],
  imports: [
    TypeOrmModule.forFeature([AccountAuthType]),
  ],
  exports: [AccountAuthTypeService],
})
export class AccountAuthTypeModule {}
allModules.push(AccountAuthTypeModule)

@Entity({name: 'account'})
export class Account {

  @ApiProperty({ required: true })
  @PrimaryGeneratedColumn({name: 'account_id'})
  id: number;

  @ApiProperty({ required: true })
  @OneToOne(type => AccountType)
  @JoinColumn({name: 'account_type_id'})
  accountType: AccountType;

  @ApiProperty({ required: true })
  @Column({name: 'account_name'})
  accountName: string;

  @ApiProperty({ required: true })
  @Column({name: 'created_at'})
  createdAt: Date;

  @ApiProperty({ required: false })
  @Column({name: 'updated_on'})
  updatedOn?: Date;

  @ApiProperty({ required: true })
  @OneToOne(type => RecordStatus)
  @JoinColumn({name: 'record_status_id'})
  recordStatus: RecordStatus;
  @OneToMany(type => AccountIdentifier, accountIdentifier => accountIdentifier.account)
  identifiers : AccountIdentifier[]
}

@Injectable()
export class AccountService extends TypeOrmCrudService<Account> {
    constructor(@InjectRepository(Account) repo: Repository<Account>) {
        super(repo);
    }
}

@Crud({ model: { type: Account }})
@Controller('account')
export class AccountController implements CrudController<Account> {
    constructor(public service: AccountService) { }
}

@Module({
  controllers: [AccountController],
  providers: [AccountService],
  imports: [
    TypeOrmModule.forFeature([Account]),
  ],
  exports: [AccountService],
})
export class AccountModule {}
allModules.push(AccountModule)

@Entity({name: 'account_identifier'})
export class AccountIdentifier {

  @ApiProperty({ required: true })
  @PrimaryGeneratedColumn({name: 'account_identifier_id'})
  id: number;

  @ApiProperty({ required: true })
  @ManyToOne(type => Account, account => account.identifiers)
  @JoinColumn()
  account: Account;

  @ApiProperty({ required: true })
  @Column({name: 'identifier_name'})
  identifierName: string;

  @ApiProperty({ required: true })
  @Column({name: 'identifier_value'})
  identifierValue: string;

  @ApiProperty({ required: true })
  @OneToOne(type => AccountAuthType)
  @JoinColumn({name: 'account_auth_type_id'})
  accountAuthType: AccountAuthType;

  @ApiProperty({ required: true })
  @Column({name: 'created_at'})
  createdAt: Date;

  @ApiProperty({ required: false })
  @Column({name: 'updated_on'})
  updatedOn?: Date;

  @ApiProperty({ required: true })
  @OneToOne(type => RecordStatus)
  @JoinColumn({name: 'record_status_id'})
  recordStatus: RecordStatus;
}

@Injectable()
export class AccountIdentifierService extends TypeOrmCrudService<AccountIdentifier> {
    constructor(@InjectRepository(AccountIdentifier) repo: Repository<AccountIdentifier>) {
        super(repo);
    }
}

@Crud({ model: { type: AccountIdentifier }})
@Controller('account-identifier')
export class AccountIdentifierController implements CrudController<AccountIdentifier> {
    constructor(public service: AccountIdentifierService) { }
}

@Module({
  controllers: [AccountIdentifierController],
  providers: [AccountIdentifierService],
  imports: [
    TypeOrmModule.forFeature([AccountIdentifier]),
  ],
  exports: [AccountIdentifierService],
})
export class AccountIdentifierModule {}
allModules.push(AccountIdentifierModule)

@Entity({name: 'configuration_scope'})
export class ConfigurationScope {

  @ApiProperty({ required: true })
  @PrimaryGeneratedColumn({name: 'configuration_scope_id'})
  id: number;

  @ApiProperty({ required: true })
  @Column({name: 'code'})
  code: string;

  @ApiProperty({ required: true })
  @Column({name: 'value'})
  value: string;

  @ApiProperty({ required: true })
  @Column({name: 'description'})
  description: string;

  @ApiProperty({ required: true })
  @Column({name: 'hierarchy_level'})
  hierarchyLevel: number;

  @ApiProperty({ required: true })
  @Column({name: 'created_at'})
  createdAt: Date;

  @ApiProperty({ required: false })
  @Column({name: 'updated_on'})
  updatedOn?: Date;

  @ApiProperty({ required: true })
  @OneToOne(type => RecordStatus)
  @JoinColumn({name: 'record_status_id'})
  recordStatus: RecordStatus;
}

@Injectable()
export class ConfigurationScopeService extends TypeOrmCrudService<ConfigurationScope> {
    constructor(@InjectRepository(ConfigurationScope) repo: Repository<ConfigurationScope>) {
        super(repo);
    }
}

@Crud({ model: { type: ConfigurationScope }})
@Controller('configuration-scope')
export class ConfigurationScopeController implements CrudController<ConfigurationScope> {
    constructor(public service: ConfigurationScopeService) { }
}

@Module({
  controllers: [ConfigurationScopeController],
  providers: [ConfigurationScopeService],
  imports: [
    TypeOrmModule.forFeature([ConfigurationScope]),
  ],
  exports: [ConfigurationScopeService],
})
export class ConfigurationScopeModule {}
allModules.push(ConfigurationScopeModule)

@Entity({name: 'master_configuration'})
export class MasterConfiguration {

  @ApiProperty({ required: true })
  @PrimaryGeneratedColumn({name: 'master_configuration_id'})
  id: number;

  @OneToOne(type => ConfigurationScope)
  @JoinColumn({name: 'configuration_scope_id'})
  configurationScope: ConfigurationScope;

  @ApiProperty({ required: true })
  @Column({name: 'name'})
  name: string;

  @ApiProperty({ required: true })
  @Column({name: 'description'})
  description: string;

  @ApiProperty({ required: true })
  @Column({name: 'default_value'})
  defaultValue: string;

  @ApiProperty({ required: true })
  @Column({name: 'short_key'})
  shortKey: string;

  @ApiProperty({ required: true })
  @Column({name: 'config_type'})
  configType: string;

  @ApiProperty({ required: true })
  @Column({name: 'created_at'})
  createdAt: Date;

  @ApiProperty({ required: false })
  @Column({name: 'updated_on'})
  updatedOn?: Date;

  @ApiProperty({ required: true })
  @OneToOne(type => RecordStatus)
  @JoinColumn({name: 'record_status_id'})
  recordStatus: RecordStatus;
}

@Injectable()
export class MasterConfigurationService extends TypeOrmCrudService<MasterConfiguration> {
    constructor(@InjectRepository(MasterConfiguration) repo: Repository<MasterConfiguration>) {
        super(repo);
    }
}

@Crud({ model: { type: MasterConfiguration }})
@Controller('master-configuration')
export class MasterConfigurationController implements CrudController<MasterConfiguration> {
    constructor(public service: MasterConfigurationService) { }
}

@Module({
  controllers: [MasterConfigurationController],
  providers: [MasterConfigurationService],
  imports: [
    TypeOrmModule.forFeature([MasterConfiguration]),
  ],
  exports: [MasterConfigurationService],
})
export class MasterConfigurationModule {}
allModules.push(MasterConfigurationModule)

@Entity({name: 'configuration_value'})
export class ConfigurationValue {

  @ApiProperty({ required: true })
  @PrimaryGeneratedColumn({name: 'configuration_value_id'})
  id: number;

  @OneToOne(type => Party)
  @JoinColumn({name: 'party_id'})
  party: Party;

  @OneToOne(type => MasterConfiguration)
  @JoinColumn({name: 'master_configuration_id'})
  masterConfiguration: MasterConfiguration;

  @ApiProperty({ required: true })
  @Column({name: 'value'})
  value: string;

  @ApiProperty({ required: true })
  @Column({name: 'is_multivalue'})
  isMultivalue: number;

  @ApiProperty({ required: true })
  @Column({name: 'nameas'})
  nameas: string;

  @ApiProperty({ required: true })
  @Column({name: 'description'})
  description: string;

  @ApiProperty({ required: true })
  @Column({name: 'created_at'})
  createdAt: Date;

  @ApiProperty({ required: false })
  @Column({name: 'updated_on'})
  updatedOn?: Date;

  @ApiProperty({ required: true })
  @OneToOne(type => RecordStatus)
  @JoinColumn({name: 'record_status_id'})
  recordStatus: RecordStatus;
}

@Injectable()
export class ConfigurationValueService extends TypeOrmCrudService<ConfigurationValue> {
    constructor(@InjectRepository(ConfigurationValue) repo: Repository<ConfigurationValue>) {
        super(repo);
    }
}

@Crud({ model: { type: ConfigurationValue }})
@Controller('configuration-value')
export class ConfigurationValueController implements CrudController<ConfigurationValue> {
    constructor(public service: ConfigurationValueService) { }
}

@Module({
  controllers: [ConfigurationValueController],
  providers: [ConfigurationValueService],
  imports: [
    TypeOrmModule.forFeature([ConfigurationValue]),
  ],
  exports: [ConfigurationValueService],
})
export class ConfigurationValueModule {}
allModules.push(ConfigurationValueModule)

@Entity({name: 'configuration_master_options'})
export class ConfigurationMasterOptions {

  @ApiProperty({ required: true })
  @PrimaryGeneratedColumn({name: 'configuration_master_options_id'})
  id: number;

  @ApiProperty({ required: true })
  @Column({name: 'name'})
  name: string;

  @ApiProperty({ required: true })
  @Column({name: 'description'})
  description: string;

  @ApiProperty({ required: true })
  @Column({name: 'type'})
  type: string;

  @ApiProperty({ required: true })
  @Column({name: 'created_at'})
  createdAt: Date;

  @ApiProperty({ required: false })
  @Column({name: 'updated_on'})
  updatedOn?: Date;

  @ApiProperty({ required: true })
  @OneToOne(type => RecordStatus)
  @JoinColumn({name: 'record_status_id'})
  recordStatus: RecordStatus;
}

@Injectable()
export class ConfigurationMasterOptionsService extends TypeOrmCrudService<ConfigurationMasterOptions> {
    constructor(@InjectRepository(ConfigurationMasterOptions) repo: Repository<ConfigurationMasterOptions>) {
        super(repo);
    }
}

@Crud({ model: { type: ConfigurationMasterOptions }})
@Controller('configuration-master-options')
export class ConfigurationMasterOptionsController implements CrudController<ConfigurationMasterOptions> {
    constructor(public service: ConfigurationMasterOptionsService) { }
}

@Module({
  controllers: [ConfigurationMasterOptionsController],
  providers: [ConfigurationMasterOptionsService],
  imports: [
    TypeOrmModule.forFeature([ConfigurationMasterOptions]),
  ],
  exports: [ConfigurationMasterOptionsService],
})
export class ConfigurationMasterOptionsModule {}
allModules.push(ConfigurationMasterOptionsModule)

@Entity({name: 'configuration_feature_flag'})
export class ConfigurationFeatureFlag {

  @ApiProperty({ required: true })
  @PrimaryGeneratedColumn({name: 'configuration_feature_flag_id'})
  id: number;

  @OneToOne(type => Party)
  @JoinColumn({name: 'party_id'})
  party: Party;

  @OneToOne(type => ConfigurationMasterOptions)
  @JoinColumn({name: 'configuration_master_options_id'})
  configurationMasterOptions: ConfigurationMasterOptions;

  @OneToOne(type => MasterConfiguration)
  @JoinColumn({name: 'master_configuration_id'})
  masterConfiguration: MasterConfiguration;

  @ApiProperty({ required: true })
  @Column({name: 'created_at'})
  createdAt: Date;

  @ApiProperty({ required: false })
  @Column({name: 'updated_on'})
  updatedOn?: Date;

  @ApiProperty({ required: true })
  @OneToOne(type => RecordStatus)
  @JoinColumn({name: 'record_status_id'})
  recordStatus: RecordStatus;
}

@Injectable()
export class ConfigurationFeatureFlagService extends TypeOrmCrudService<ConfigurationFeatureFlag> {
    constructor(@InjectRepository(ConfigurationFeatureFlag) repo: Repository<ConfigurationFeatureFlag>) {
        super(repo);
    }
}

@Crud({ model: { type: ConfigurationFeatureFlag }})
@Controller('configuration-feature-flag')
export class ConfigurationFeatureFlagController implements CrudController<ConfigurationFeatureFlag> {
    constructor(public service: ConfigurationFeatureFlagService) { }
}

@Module({
  controllers: [ConfigurationFeatureFlagController],
  providers: [ConfigurationFeatureFlagService],
  imports: [
    TypeOrmModule.forFeature([ConfigurationFeatureFlag]),
  ],
  exports: [ConfigurationFeatureFlagService],
})
export class ConfigurationFeatureFlagModule {}
allModules.push(ConfigurationFeatureFlagModule)

@Entity({name: 'plpgsql_check_result;'})
export class PlpgsqlCheckResult; {

  @ApiProperty({ required: true })
  @PrimaryGeneratedColumn({name: 'plpgsql_check_result;_id'})
  id: number;

  @ApiProperty({ required: false })
  @Column({name: 'function_id'})
  functionId?: string;

  @ApiProperty({ required: false })
  @Column({name: 'line_no'})
  lineNo?: number;

  @ApiProperty({ required: false })
  @Column({name: 'statement'})
  statement?: string;

  @ApiProperty({ required: false })
  @Column({name: 'sql_state'})
  sqlState?: string;

  @ApiProperty({ required: false })
  @Column({name: 'message'})
  message?: string;

  @ApiProperty({ required: false })
  @Column({name: 'detail'})
  detail?: string;

  @ApiProperty({ required: false })
  @Column({name: 'hint'})
  hint?: string;

  @ApiProperty({ required: false })
  @Column({name: 'level'})
  level?: string;

  @ApiProperty({ required: false })
  @Column({name: 'position'})
  position?: string;

  @ApiProperty({ required: false })
  @Column({name: 'query'})
  query?: string;

  @ApiProperty({ required: false })
  @Column({name: 'context'})
  context?: string;

  @ApiProperty({ required: true })
  @Column({name: 'created_at'})
  createdAt: Date;

  @ApiProperty({ required: false })
  @Column({name: 'updated_on'})
  updatedOn?: Date;

  @ApiProperty({ required: true })
  @OneToOne(type => RecordStatus)
  @JoinColumn({name: 'record_status_id'})
  recordStatus: RecordStatus;
}

@Injectable()
export class PlpgsqlCheckResult;Service extends TypeOrmCrudService<PlpgsqlCheckResult;> {
    constructor(@InjectRepository(PlpgsqlCheckResult;) repo: Repository<PlpgsqlCheckResult;>) {
        super(repo);
    }
}

@Crud({ model: { type: PlpgsqlCheckResult; }})
@Controller('plpgsql-check-result;')
export class PlpgsqlCheckResult;Controller implements CrudController<PlpgsqlCheckResult;> {
    constructor(public service: PlpgsqlCheckResult;Service) { }
}

@Module({
  controllers: [PlpgsqlCheckResult;Controller],
  providers: [PlpgsqlCheckResult;Service],
  imports: [
    TypeOrmModule.forFeature([PlpgsqlCheckResult;]),
  ],
  exports: [PlpgsqlCheckResult;Service],
})
export class PlpgsqlCheckResult;Module {}
allModules.push(PlpgsqlCheckResult;Module)
